import { Router, type Request, type Response } from 'express';
import { searchGraph } from '../graphitiClient.js';
import { logger } from '../utils/logger.js';

const router: any = Router();

interface DashboardQueryParams {
  desde: string;
  hasta: string;
  tipo_deuda?: string;
  agente_id?: string;
  groupBy?: string;
  sort?: string;
}

// Función helper para validar fechas
function validateDateRange(desde: string, hasta: string): boolean {
  const desdeDate = new Date(desde);
  const hastaDate = new Date(hasta);
  return !isNaN(desdeDate.getTime()) && !isNaN(hastaDate.getTime()) && desdeDate <= hastaDate;
}

// Función helper para calcular delta vs período anterior
function calculateDelta(current: number, previous: number): number {
  if (previous === 0) return current > 0 ? 100 : 0;
  return ((current - previous) / previous) * 100;
}

// 1. KPIs del Dashboard
export async function getDashboardKPIs(req: Request, res: Response): Promise<void> {
  try {
    const { desde, hasta, tipo_deuda, agente_id } = req.query as unknown as DashboardQueryParams;
    
    if (!desde || !hasta || !validateDateRange(desde, hasta)) {
      res.status(400).json({
        error: 'Invalid date range',
        message: 'desde and hasta must be valid dates in YYYY-MM-DD format'
      });
      return;
    }

    logger.info('API', 'Fetching dashboard KPIs', { desde, hasta, tipo_deuda, agente_id });

    // Construir query para obtener datos del período actual
    const currentPeriodQuery = `
      MATCH (c:Client)-[:HAS_DEBT]->(d:Debt)
      MATCH (c)-[:HAD_INTERACTION]->(i:Interaction)
      WHERE i.timestamp >= datetime('${desde}T00:00:00') AND i.timestamp <= datetime('${hasta}T23:59:59')
      ${tipo_deuda && tipo_deuda !== 'todos' ? `AND d.tipo_deuda = '${tipo_deuda}'` : ''}
      ${agente_id && agente_id !== 'todos' ? `AND i.agente_id = '${agente_id}'` : ''}
      RETURN 
        c.id as client_id,
        c.nombre as client_name,
        d.monto_deuda_inicial as debt_amount,
        d.saldo_actual as current_balance,
        i.resultadoado as interaction_result,
        i.timestamp as interaction_time,
        i.tipo as interaction_type,
        i.sentimiento as sentiment,
        i.duracion_segundos as duration
    `;

    // Construir query para período anterior (mismo rango de días)
    const daysDiff = Math.ceil((new Date(hasta).getTime() - new Date(desde).getTime()) / (1000 * 60 * 60 * 24));
    const previousDesde = new Date(new Date(desde).getTime() - daysDiff * 24 * 60 * 60 * 1000).toISOString().split('T')[0];
    const previousHasta = new Date(new Date(hasta).getTime() - daysDiff * 24 * 60 * 60 * 1000).toISOString().split('T')[0];

    const previousPeriodQuery = `
      MATCH (c:Client)-[:HAS_DEBT]->(d:Debt)
      MATCH (c)-[:HAD_INTERACTION]->(i:Interaction)
      WHERE i.timestamp >= datetime('${previousDesde}T00:00:00') AND i.timestamp <= datetime('${previousHasta}T23:59:59')
      ${tipo_deuda && tipo_deuda !== 'todos' ? `AND d.tipo_deuda = '${tipo_deuda}'` : ''}
      ${agente_id && agente_id !== 'todos' ? `AND i.agente_id = '${agente_id}'` : ''}
      RETURN 
        c.id as client_id,
        c.nombre as client_name,
        d.monto_deuda_inicial as debt_amount,
        d.saldo_actual as current_balance,
        i.resultadoado as interaction_result,
        i.timestamp as interaction_time,
        i.tipo as interaction_type,
        i.sentimiento as sentiment,
        i.duracion_segundos as duration
    `;

    // Ejecutar queries
    const currentResult = await searchGraph({ 
      query: currentPeriodQuery,
      group_id: "analizador-patrones"
    });

    const previousResult = await searchGraph({ 
      query: previousPeriodQuery,
      group_id: "analizador-patrones"
    });

    if (!currentResult || !previousResult) {
      res.status(500).json({
        error: 'Failed to fetch data from Graphiti',
        message: 'Unable to retrieve dashboard data'
      });
      return;
    }

    const currentData = currentResult.results || [];
    const previousData = previousResult.results || [];

    // Procesar datos del período actual
    const currentMetrics = processMetrics(currentData);
    const previousMetrics = processMetrics(previousData);

    // Calcular KPIs con deltas
    const kpis = {
      tasa_recuperacion: {
        valor: currentMetrics.tasaRecuperacion,
        delta_periodo_anterior: calculateDelta(currentMetrics.tasaRecuperacion, previousMetrics.tasaRecuperacion),
        periodo_anterior: previousMetrics.tasaRecuperacion
      },
      promesas_cumplidas: {
        valor: currentMetrics.promesasCumplidas,
        delta_periodo_anterior: calculateDelta(currentMetrics.promesasCumplidas, previousMetrics.promesasCumplidas),
        total_promesas: currentMetrics.totalPromesas
      },
      promesas_incumplidas: {
        valor: currentMetrics.promesasIncumplidas,
        delta_periodo_anterior: calculateDelta(currentMetrics.promesasIncumplidas, previousMetrics.promesasIncumplidas),
        monto_total: currentMetrics.montoPromesasIncumplidas
      },
      contactabilidad: {
        valor: currentMetrics.contactabilidad,
        delta_periodo_anterior: calculateDelta(currentMetrics.contactabilidad, previousMetrics.contactabilidad),
        intentos_total: currentMetrics.totalIntentos,
        respuestas_total: currentMetrics.totalRespuestas
      },
      tiempo_medio_primer_contacto: {
        valor: currentMetrics.tiempoMedioPrimerContacto,
        delta_periodo_anterior: calculateDelta(currentMetrics.tiempoMedioPrimerContacto, previousMetrics.tiempoMedioPrimerContacto)
      },
      pago_medio_cliente: {
        valor: currentMetrics.pagoMedioCliente,
        delta_periodo_anterior: calculateDelta(currentMetrics.pagoMedioCliente, previousMetrics.pagoMedioCliente),
        ticket_mas_alto: currentMetrics.ticketMasAlto
      },
      pago_completo_porcentaje: {
        valor: currentMetrics.pagoCompletoPorcentaje,
        delta_periodo_anterior: calculateDelta(currentMetrics.pagoCompletoPorcentaje, previousMetrics.pagoCompletoPorcentaje),
        total_pagos: currentMetrics.totalPagos,
        pagos_completos: currentMetrics.pagosCompletos
      },
      clientes_riesgo: {
        valor: currentMetrics.clientesRiesgo,
        delta_periodo_anterior: calculateDelta(currentMetrics.clientesRiesgo, previousMetrics.clientesRiesgo),
        criterio: ">3 intentos sin respuesta + sentimiento hostil/frustrado"
      }
    };

    res.json(kpis);
  } catch (error: any) {
    logger.error('API', 'Error fetching dashboard KPIs', { error: error.message });
    res.status(500).json({
      error: 'Internal server error',
      message: 'Failed to fetch dashboard KPIs'
    });
  }
}

// Función helper para procesar métricas
function processMetrics(data: any[]): any {
  const metrics = {
    tasaRecuperacion: 0,
    promesasCumplidas: 0,
    promesasIncumplidas: 0,
    totalPromesas: 0,
    contactabilidad: 0,
    totalIntentos: 0,
    totalRespuestas: 0,
    tiempoMedioPrimerContacto: 0,
    pagoMedioCliente: 0,
    ticketMasAlto: 0,
    pagoCompletoPorcentaje: 0,
    totalPagos: 0,
    pagosCompletos: 0,
    clientesRiesgo: 0
  };

  // Procesar cada interacción
  data.forEach(interaction => {
    // Contar intentos y respuestas
    metrics.totalIntentos++;
    if (interaction.interaction_result && interaction.interaction_result !== 'sin_respuesta') {
      metrics.totalRespuestas++;
    }

    // Procesar pagos
    if (interaction.interaction_result === 'pago_inmediato' || interaction.interaction_result === 'pago_recibido') {
      metrics.totalPagos++;
      // Aquí podrías extraer el monto del pago si está disponible
    }

    // Procesar promesas
    if (interaction.interaction_result === 'promesa_pago') {
      metrics.totalPromesas++;
    }
  });

  // Calcular métricas derivadas
  metrics.contactabilidad = metrics.totalIntentos > 0 ? (metrics.totalRespuestas / metrics.totalIntentos) * 100 : 0;
  metrics.pagoCompletoPorcentaje = metrics.totalPagos > 0 ? (metrics.pagosCompletos / metrics.totalPagos) * 100 : 0;

  return metrics;
}

// 2. Actividad por Tiempo
export async function getActivityData(req: Request, res: Response): Promise<void> {
  try {
    const { desde, hasta, groupBy = 'day' } = req.query as unknown as DashboardQueryParams;
    
    if (!desde || !hasta || !validateDateRange(desde, hasta)) {
      res.status(400).json({
        error: 'Invalid date range',
        message: 'desde and hasta must be valid dates in YYYY-MM-DD format'
      });
      return;
    }

    logger.info('API', 'Fetching activity data', { desde, hasta, groupBy });

    const query = `
      MATCH (c:Client)-[:HAD_INTERACTION]->(i:Interaction)
      WHERE i.timestamp >= datetime('${desde}T00:00:00') AND i.timestamp <= datetime('${hasta}T23:59:59')
      RETURN 
        date(i.timestamp) as fecha,
        i.tipo as tipo_interaccion,
        i.resultadoado as resultado,
        count(i) as count
      ORDER BY fecha
    `;

    const result = await searchGraph({ 
      query,
      group_id: "analizador-patrones"
    });

    if (!result) {
      res.status(500).json({
        error: 'Failed to fetch activity data',
        message: 'Unable to retrieve activity information'
      });
      return;
    }

    // Procesar datos para el formato requerido
    const rawData = result.results || [];
    const activityData = processActivityData(rawData, groupBy);

    res.json(activityData);
  } catch (error: any) {
    logger.error('API', 'Error fetching activity data', { error: error.message });
    res.status(500).json({
      error: 'Internal server error',
      message: 'Failed to fetch activity data'
    });
  }
}

// Función helper para procesar datos de actividad
function processActivityData(rawData: any[], groupBy: string): any[] {
  const groupedData = new Map();

  rawData.forEach(item => {
    const fecha = item.fecha;
    const tipo = item.tipo_interaccion;
    const count = item.count;

    if (!groupedData.has(fecha)) {
      groupedData.set(fecha, {
        fecha,
        interacciones: {
          llamadas_salientes: 0,
          llamadas_entrantes: 0,
          sms: 0,
          email: 0,
          pagos: 0
        },
        tasa_exito: 0,
        flujo_pagos: 0
      });
    }

    const dayData = groupedData.get(fecha);
    
    // Contar por tipo de interacción
    switch (tipo) {
      case 'llamada_saliente':
        dayData.interacciones.llamadas_salientes += count;
        break;
      case 'llamada_entrante':
        dayData.interacciones.llamadas_entrantes += count;
        break;
      case 'sms':
        dayData.interacciones.sms += count;
        break;
      case 'email':
        dayData.interacciones.email += count;
        break;
      case 'pago':
        dayData.interacciones.pagos += count;
        break;
    }
  });

  return Array.from(groupedData.values());
}

// 3. Mejores Horarios
export async function getBestHours(req: Request, res: Response): Promise<void> {
  try {
    const { desde, hasta, tipo_deuda, agente_id } = req.query as unknown as DashboardQueryParams;
    
    if (!desde || !hasta || !validateDateRange(desde, hasta)) {
      res.status(400).json({
        error: 'Invalid date range',
        message: 'desde and hasta must be valid dates in YYYY-MM-DD format'
      });
      return;
    }

    logger.info('API', 'Fetching best hours data', { desde, hasta, tipo_deuda, agente_id });

    const query = `
      MATCH (c:Client)-[:HAS_DEBT]->(d:Debt)
      MATCH (c)-[:HAD_INTERACTION]->(i:Interaction)
      WHERE i.timestamp >= datetime('${desde}T00:00:00') AND i.timestamp <= datetime('${hasta}T23:59:59')
      AND i.tipo = 'llamada_saliente'
      ${tipo_deuda && tipo_deuda !== 'todos' ? `AND d.tipo_deuda = '${tipo_deuda}'` : ''}
      ${agente_id && agente_id !== 'todos' ? `AND i.agente_id = '${agente_id}'` : ''}
      RETURN 
        dayOfWeek(i.timestamp) as dia_semana,
        hour(i.timestamp) as hora,
        count(i) as total_llamadas,
        count(CASE WHEN i.resultadoado != 'sin_respuesta' THEN i END) as llamadas_con_respuesta,
        count(CASE WHEN i.resultadoado IN ['promesa_pago', 'pago_inmediato', 'renegociacion'] THEN i END) as llamadas_exitosas,
        avg(i.duracion_segundos) as duracion_media
      ORDER BY dia_semana, hora
    `;

    const result = await searchGraph({ 
      query,
      group_id: "analizador-patrones"
    });

    if (!result) {
      res.status(500).json({
        error: 'Failed to fetch best hours data',
        message: 'Unable to retrieve best hours information'
      });
      return;
    }

    const rawData = result.results || [];
    const bestHoursData = processBestHoursData(rawData);

    res.json(bestHoursData);
  } catch (error: any) {
    logger.error('API', 'Error fetching best hours data', { error: error.message });
    res.status(500).json({
      error: 'Internal server error',
      message: 'Failed to fetch best hours data'
    });
  }
}

// Función helper para procesar datos de mejores horarios
function processBestHoursData(rawData: any[]): any[] {
  return rawData.map(item => {
    const totalLlamadas = item.total_llamadas || 0;
    const llamadasConRespuesta = item.llamadas_con_respuesta || 0;
    const llamadasExitosas = item.llamadas_exitosas || 0;

    return {
      dia_semana: item.dia_semana?.toLowerCase() || 'unknown',
      hora: item.hora || 0,
      contact_rate: totalLlamadas > 0 ? (llamadasConRespuesta / totalLlamadas) * 100 : 0,
      success_rate: llamadasConRespuesta > 0 ? (llamadasExitosas / llamadasConRespuesta) * 100 : 0,
      duracion_media: item.duracion_media || 0,
      total_llamadas: totalLlamadas,
      llamadas_con_respuesta: llamadasConRespuesta
    };
  });
}

// 4. Embudo de Cobranza
export async function getFunnelData(req: Request, res: Response): Promise<void> {
  try {
    const { desde, hasta } = req.query as unknown as DashboardQueryParams;
    
    if (!desde || !hasta || !validateDateRange(desde, hasta)) {
      res.status(400).json({
        error: 'Invalid date range',
        message: 'desde and hasta must be valid dates in YYYY-MM-DD format'
      });
      return;
    }

    logger.info('API', 'Fetching funnel data', { desde, hasta });

    const query = `
      MATCH (c:Client)-[:HAD_INTERACTION]->(i:Interaction)
      WHERE i.timestamp >= datetime('${desde}T00:00:00') AND i.timestamp <= datetime('${hasta}T23:59:59')
      RETURN 
        i.resultadoado as resultado,
        count(i) as count
    `;

    const result = await searchGraph({ 
      query,
      group_id: "analizador-patrones"
    });

    if (!result) {
      res.status(500).json({
        error: 'Failed to fetch funnel data',
        message: 'Unable to retrieve funnel information'
      });
      return;
    }

    const rawData = result.results || [];
    const funnelData = processFunnelData(rawData);

    res.json(funnelData);
  } catch (error: any) {
    logger.error('API', 'Error fetching funnel data', { error: error.message });
    res.status(500).json({
      error: 'Internal server error',
      message: 'Failed to fetch funnel data'
    });
  }
}

// Función helper para procesar datos del embudo
function processFunnelData(rawData: any[]): any[] {
  const etapas = [
    { etapa: 'Intentos de Contacto', resultado: null },
    { etapa: 'Respuestas', resultado: 'con_respuesta' },
    { etapa: 'Promesas', resultado: 'promesa_pago' },
    { etapa: 'Pagos', resultado: 'pago_inmediato' },
    { etapa: 'Pagos Completos', resultado: 'pago_completo' }
  ];

  const totalIntentos = rawData.reduce((sum, item) => sum + (item.count || 0), 0);
  let previousCount = totalIntentos;

  return etapas.map(etapa => {
    let count = 0;
    
    if (etapa.resultado === null) {
      count = totalIntentos;
    } else {
      const matchingData = rawData.find(item => item.resultado === etapa.resultado);
      count = matchingData ? matchingData.count : 0;
    }

    const conversionPorcentaje = totalIntentos > 0 ? (count / totalIntentos) * 100 : 0;
    const dropOff = previousCount - count;
    
    previousCount = count;

    return {
      etapa: etapa.etapa,
      count,
      conversion_porcentaje: Math.round(conversionPorcentaje * 100) / 100,
      drop_off: dropOff
    };
  });
}

// 5. Efectividad de Agentes
export async function getAgentsData(req: Request, res: Response): Promise<void> {
  try {
    const { desde, hasta, sort = 'promesas_por_100_llamadas' } = req.query as unknown as DashboardQueryParams;
    
    if (!desde || !hasta || !validateDateRange(desde, hasta)) {
      res.status(400).json({
        error: 'Invalid date range',
        message: 'desde and hasta must be valid dates in YYYY-MM-DD format'
      });
      return;
    }

    logger.info('API', 'Fetching agents data', { desde, hasta, sort });

    const query = `
      MATCH (a:Agent)-[:PERFORMED]->(i:Interaction)
      WHERE i.timestamp >= datetime('${desde}T00:00:00') AND i.timestamp <= datetime('${hasta}T23:59:59')
      RETURN 
        a.id as agente_id,
        a.nombre as nombre,
        count(i) as total_interacciones,
        count(CASE WHEN i.resultadoado = 'promesa_pago' THEN i END) as promesas,
        count(CASE WHEN i.resultadoado IN ['pago_inmediato', 'pago_recibido'] THEN i END) as pagos,
        avg(i.duracion_segundos) as tiempo_medio_llamada,
        avg(CASE WHEN i.sentimiento = 'cooperativo' THEN 1 WHEN i.sentimiento = 'neutral' THEN 0.5 ELSE 0 END) as sentimiento_promedio
      ORDER BY ${sort} DESC
    `;

    const result = await searchGraph({ 
      query,
      group_id: "analizador-patrones"
    });

    if (!result) {
      res.status(500).json({
        error: 'Failed to fetch agents data',
        message: 'Unable to retrieve agents information'
      });
      return;
    }

    const rawData = result.results || [];
    const agentsData = processAgentsData(rawData);

    res.json(agentsData);
  } catch (error: any) {
    logger.error('API', 'Error fetching agents data', { error: error.message });
    res.status(500).json({
      error: 'Internal server error',
      message: 'Failed to fetch agents data'
    });
  }
}

// Función helper para procesar datos de agentes
function processAgentsData(rawData: any[]): any[] {
  return rawData.map(item => {
    const totalInteracciones = item.total_interacciones || 0;
    const promesas = item.promesas || 0;
    const pagos = item.pagos || 0;

    return {
      agente_id: item.agente_id || 'unknown',
      nombre: item.nombre || `Agente ${item.agente_id}`,
      promesas_por_100_llamadas: totalInteracciones > 0 ? (promesas / totalInteracciones) * 100 : 0,
      promesas_cumplidas_porcentaje: promesas > 0 ? (pagos / promesas) * 100 : 0,
      monto_recuperado: 0, // TODO: Implementar cuando esté disponible el monto
      tiempo_medio_llamada: item.tiempo_medio_llamada || 0,
      sentimiento_promedio: item.sentimiento_promedio > 0.7 ? 'cooperativo' : 
                           item.sentimiento_promedio > 0.3 ? 'neutral' : 'frustrado'
    };
  });
}

// 6. Promesas en Riesgo
export async function getPromisesRisk(req: Request, res: Response): Promise<void> {
  try {
    const { withinHours = '72' } = req.query;
    const hours = parseInt(withinHours as string, 10);

    if (isNaN(hours) || hours < 0) {
      res.status(400).json({
        error: 'Invalid withinHours parameter',
        message: 'withinHours must be a positive integer'
      });
      return;
    }

    logger.info('API', 'Fetching promises risk data', { withinHours: hours });

    const query = `
      MATCH (c:Client)-[:HAD_INTERACTION]->(i:Interaction)
      WHERE i.resultadoado = 'promesa_pago'
      AND i.timestamp <= datetime() + duration({hours: ${hours}})
      RETURN 
        i.id as promesa_id,
        c.id as cliente_id,
        c.nombre as cliente_nombre,
        i.monto_prometido as monto_prometido,
        i.fecha_promesa as fecha_promesa,
        i.timestamp as timestamp_promesa
      ORDER BY i.fecha_promesa ASC
    `;

    const result = await searchGraph({ 
      query,
      group_id: "analizador-patrones"
    });

    if (!result) {
      res.status(500).json({
        error: 'Failed to fetch promises risk data',
        message: 'Unable to retrieve promises risk information'
      });
      return;
    }

    const rawData = result.results || [];
    const promisesData = processPromisesRiskData(rawData);

    res.json(promisesData);
  } catch (error: any) {
    logger.error('API', 'Error fetching promises risk data', { error: error.message });
    res.status(500).json({
      error: 'Internal server error',
      message: 'Failed to fetch promises risk data'
    });
  }
}

// Función helper para procesar datos de promesas en riesgo
function processPromisesRiskData(rawData: any[]): any[] {
  const now = new Date();
  
  return rawData.map(item => {
    const fechaPromesa = new Date(item.fecha_promesa);
    const diasRestantes = Math.ceil((fechaPromesa.getTime() - now.getTime()) / (1000 * 60 * 60 * 24));
    const diasVencida = Math.ceil((now.getTime() - fechaPromesa.getTime()) / (1000 * 60 * 60 * 24));

    let estado: 'proxima_vencer' | 'vencida' | 'cumplida';
    if (diasRestantes > 0 && diasRestantes <= 3) {
      estado = 'proxima_vencer';
    } else if (diasVencida > 0) {
      estado = 'vencida';
    } else {
      estado = 'cumplida';
    }

    return {
      promesa_id: item.promesa_id || 'unknown',
      cliente_id: item.cliente_id || 'unknown',
      cliente_nombre: item.cliente_nombre || `Cliente ${item.cliente_id}`,
      monto_prometido: item.monto_prometido || 0,
      fecha_promesa: item.fecha_promesa || '',
      estado,
      dias_restantes: diasRestantes > 0 ? diasRestantes : undefined,
      dias_vencida: diasVencida > 0 ? diasVencida : undefined
    };
  });
}

// 7. Datos de Sentimiento
export async function getSentimentData(req: Request, res: Response): Promise<void> {
  try {
    const { desde, hasta } = req.query as unknown as DashboardQueryParams;
    
    if (!desde || !hasta || !validateDateRange(desde, hasta)) {
      res.status(400).json({
        error: 'Invalid date range',
        message: 'desde and hasta must be valid dates in YYYY-MM-DD format'
      });
      return;
    }

    logger.info('API', 'Fetching sentiment data', { desde, hasta });

    const query = `
      MATCH (c:Client)-[:HAD_INTERACTION]->(i:Interaction)
      WHERE i.timestamp >= datetime('${desde}T00:00:00') AND i.timestamp <= datetime('${hasta}T23:59:59')
      AND i.sentimiento IS NOT NULL
      RETURN 
        date(i.timestamp) as fecha,
        i.sentimiento as sentimiento,
        count(i) as count
      ORDER BY fecha
    `;

    const result = await searchGraph({ 
      query,
      group_id: "analizador-patrones"
    });

    if (!result) {
      res.status(500).json({
        error: 'Failed to fetch sentiment data',
        message: 'Unable to retrieve sentiment information'
      });
      return;
    }

    const rawData = result.results || [];
    const sentimentData = processSentimentData(rawData);

    res.json(sentimentData);
  } catch (error: any) {
    logger.error('API', 'Error fetching sentiment data', { error: error.message });
    res.status(500).json({
      error: 'Internal server error',
      message: 'Failed to fetch sentiment data'
    });
  }
}

// Función helper para procesar datos de sentimiento
function processSentimentData(rawData: any[]): any[] {
  const groupedData = new Map();

  rawData.forEach(item => {
    const fecha = item.fecha;
    const sentimiento = item.sentimiento;
    const count = item.count;

    if (!groupedData.has(fecha)) {
      groupedData.set(fecha, {
        fecha,
        cooperativo: 0,
        neutral: 0,
        frustrado: 0,
        hostil: 0,
        total: 0
      });
    }

    const dayData = groupedData.get(fecha);
    dayData[sentimiento] = count;
    dayData.total += count;
  });

  return Array.from(groupedData.values());
}

// Definir rutas
router.get('/kpis', getDashboardKPIs);
router.get('/activity', getActivityData);
router.get('/best-hours', getBestHours);
router.get('/funnel', getFunnelData);
router.get('/agents', getAgentsData);
router.get('/promises/upcoming', getPromisesRisk);
router.get('/sentiment', getSentimentData);

export default router;
